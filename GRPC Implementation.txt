import software.amazon.awssdk.auth.token.jwt.Jwt;
import software.amazon.awssdk.auth.token.jwt.JwtException;
import software.amazon.awssdk.auth.token.jwt.JwtValidator;
import software.amazon.awssdk.auth.token.jwt.jwks.JwksProvider;
import software.amazon.awssdk.auth.token.jwt.jwks.JwksProviders;
import software.amazon.awssdk.auth.token.jwt.jwks.cache.JwksCache;
import software.amazon.awssdk.auth.token.jwt.jwks.cache.JwksCaches;

import java.util.List;
import java.util.Map;

public class CognitoJwtValidatorExample {

    public static void main(String[] args) {
        String token = "seu_token_jwt_aqui";
        String poolId = "seu_pool_id";  // Ex: us-west-2_xxxxxxxxx
        String region = "sua_regiao";   // Ex: us-west-2
        
        try {
            // 1. Configura o provider para baixar automaticamente as chaves públicas do Cognito
            JwksProvider jwksProvider = JwksProviders.cognito(region, poolId);
            JwksCache jwksCache = JwksCaches.createDefault(jwksProvider);
            
            // 2. Cria o validador de JWT
            JwtValidator jwtValidator = JwtValidator.builder()
                .jwksCache(jwksCache)
                .expectedIssuer("https://cognito-idp." + region + ".amazonaws.com/" + poolId)
                .build();
            
            // 3. Valida o JWT
            Jwt jwt = jwtValidator.validate(token);
            System.out.println("Token válido!");

            // 4. Acessar as claims (informações contidas no token)
            Map<String, Object> claims = jwt.claims();
            
            // Exemplo: Verificar se o usuário pertence a algum grupo específico (Role)
            List<String> roles = (List<String>) claims.get("cognito:groups");
            if (roles != null && roles.contains("Admin")) {
                System.out.println("Usuário possui role de Admin");
            } else {
                System.out.println("Usuário não possui a role necessária");
            }

            // Outros exemplos de acesso às claims
            System.out.println("Usuário: " + claims.get("sub")); // ID do usuário
            System.out.println("Email: " + claims.get("email")); // Email do usuário
            
        } catch (JwtException e) {
            // Token inválido ou erro na validação
            System.out.println("Erro ao validar o token: " + e.getMessage());
        }
    }
}
