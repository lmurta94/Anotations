<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.6" jmeter="5.6">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Performance Test" enabled="true">
      <stringProp name="TestPlan.comments">Teste de performance com inserção, pausa e chamada GetAll</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Conexão JDBC" enabled="true">
        <stringProp name="dataSource">banco_teste</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="url">jdbc:postgresql://localhost:5432/seubanco</stringProp>
        <stringProp name="username">seuusuario</stringProp>
        <stringProp name="password">suasenha</stringProp>
        <stringProp name="pool">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="keepAlive">true</stringProp>
      </JDBCDataSource>
      
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Inserção de Dados" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador de Iteração" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop de Inserção" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Inserir Dados" enabled="true">
            <stringProp name="dataSource">banco_teste</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">
INSERT INTO sua_tabela (nome, email) 
VALUES (
  CONCAT('Usuario_', floor(random()*1000)), 
  CONCAT('email_', floor(random()*1000), '@teste.com')
)
            </stringProp>
            <stringProp name="variable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
        </hashTree>
      </hashTree>
      
      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Pausa de 2 Segundos" enabled="true">
        <stringProp name="ConstantTimer.delay">2000</stringProp>
      </ConstantTimer>
      
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Teste GetAll" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador de Iteração" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAll Endpoint" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variáveis Definidas pelo Usuário" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/seu-endpoint/getAll</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Verificação de Performance" enabled="true">
            <stringProp name="script">
// Calcula a média de tempo de resposta
long[] responseTimes = new long[prev.getSubResults().length];
for (int i = 0; i < prev.getSubResults().length; i++) {
    responseTimes[i] = prev.getSubResults()[i].getTime();
}

long mediaTempoResposta = 0;
for (long tempo : responseTimes) {
    mediaTempoResposta += tempo;
}
mediaTempoResposta = mediaTempoResposta / responseTimes.length;

if (mediaTempoResposta <= 50) {
    log.info("✅ TESTE PASSOU: Média de " + mediaTempoResposta + "ms");
} else {
    log.error("❌ TESTE FALHOU: Média de " + mediaTempoResposta + "ms (Limite: 50ms)");
    prev.setSuccessful(false);
}
            </stringProp>
          </BeanShellPostProcessor>
        </hashTree>
      </hashTree>
      
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Relatório Agregado" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <meanTime>true</meanTime>
            <responseTime>true</responseTime>
          </value>
        </objProp>
      </ResultCollector>
      
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Resultados" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
      </ResultCollector>
      
      <BeanShellListener guiclass="BeanShellListenerGui" testclass="BeanShellListener" testname="Verificação Final de Performance" enabled="true">
        <stringProp name="script">
long mediaTempoResposta = (sampleCount > 0) ? (totalResponseTime / sampleCount) : 0;

if (mediaTempoResposta <= 50) {
    log.info("✅ TESTE PASSOU: Média de " + mediaTempoResposta + "ms");
    System.out.println("✅ PASSOU: Média de " + mediaTempoResposta + "ms");
} else {
    log.error("❌ TESTE FALHOU: Média de " + mediaTempoResposta + "ms (Limite: 50ms)");
    System.out.println("❌ FALHOU: Média de " + mediaTempoResposta + "ms");
}
        </stringProp>
      </BeanShellListener>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
