import io.quarkus.test.junit.QuarkusTest;
import io.grpc.*;
import org.jboss.logging.Logger;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.extension.ExtendWith;

import java.time.Duration;
import java.time.Instant;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

@QuarkusTest
@ExtendWith(MockitoExtension.class)
public class GrpcInterceptorTest {

    @InjectMocks
    GrpcInterceptor grpcInterceptor;

    @Mock
    ServerCall<String, String> serverCall;

    @Mock
    Metadata metadata;

    @Mock
    ServerCallHandler<String, String> serverCallHandler;

    @Mock
    Logger LOGGER;

    @Test
    public void testInterceptorLogsRequestAndResponse() {
        // Configura mocks
        when(serverCall.getMethodDescriptor()).thenReturn(MethodDescriptor.newBuilder()
                .setFullMethodName("TestService/TestMethod")
                .setType(MethodDescriptor.MethodType.UNARY)
                .build());
        when(serverCall.getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR)).thenReturn("127.0.0.1");

        ArgumentCaptor<String> logCaptor = ArgumentCaptor.forClass(String.class);
        doNothing().when(LOGGER).infof(logCaptor.capture(), any());

        // Captura o horário inicial para medir o tempo de execução
        Instant startTime = Instant.now();

        // Executa o interceptor
        grpcInterceptor.interceptCall(serverCall, metadata, serverCallHandler);

        // Verifica o conteúdo dos logs
        verify(LOGGER, atLeastOnce()).infof(anyString(), any());
        
        // Verifica que o log contém o IP, nome do método e a data/hora de início
        String logOutput = logCaptor.getAllValues().toString();
        assertTrue(logOutput.contains("127.0.0.1"));
        assertTrue(logOutput.contains("TestService/TestMethod"));
        assertTrue(logOutput.contains(startTime.toString()));

        // Captura o horário de término e calcula o tempo de processamento em milissegundos
        Instant endTime = Instant.now();
        long processingTimeMillis = Duration.between(startTime, endTime).toMillis();
        System.out.println("Processing time: " + processingTimeMillis + " ms");

        // Verifica se o tempo de execução foi razoável (por exemplo, menor que 1 segundo para o mock)
        assertTrue(processingTimeMillis < 1000); // Supondo que o tempo de execução do mock é menor que 1 segundo
    }
}







import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerResponseContext;
import java.io.IOException;

public class LogInterceptorConfigTest {

    @Mock
    private ContainerRequestContext mockRequestContext;

    @Mock
    private ContainerResponseContext mockResponseContext;

    @InjectMocks
    private LogInterceptorConfig logInterceptorConfig;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testRequestLogging() {
        // Aqui você pode simular uma requisição e verificar se o log ocorre conforme esperado
        when(mockRequestContext.getEntity()).thenReturn("Sample request body");

        logInterceptorConfig.filter(mockRequestContext, mockResponseContext);

        // Verifique se o log foi chamado com o conteúdo correto (pode variar com base na implementação)
        verify(log, times(1)).debug("Request: \n [Sample request body]");
    }

    @Test
    public void testResponseLogging() throws IOException {
        // Simule uma resposta com um corpo específico
        when(mockResponseContext.hasEntity()).thenReturn(true);
        when(mockResponseContext.getEntity()).thenReturn("Sample response body");

        logInterceptorConfig.filter(mockRequestContext, mockResponseContext);

        // Verifique se o log foi chamado para a resposta
        verify(log, times(1)).debug("Response: \n [Sample response body]");
    }
}














