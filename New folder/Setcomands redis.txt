package org.acme.redis;

import io.quarkus.cache.CacheInvalidate;
import io.quarkus.cache.CacheKey;
import io.quarkus.cache.CacheResult;
import io.quarkus.redis.datasource.RedisDataSource;
import io.quarkus.redis.datasource.set.SetCommands;
import io.smallrye.mutiny.Uni;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@ApplicationScoped
public class CustomerService {

    private final SetCommands<String, CustomerModel> customerSetCommands;

    @Inject
    public CustomerService(RedisDataSource redisDataSource) {
        customerSetCommands = redisDataSource.set(CustomerModel.class);
    }

    // Cacheando a lista de clientes
    @CacheResult(cacheName = "customer-list")
    public Uni<List<CustomerModel>> getCustomers() {
        return Uni.createFrom().item(customerSetCommands.smembers("customers")
                .stream().collect(Collectors.toList()));
    }

    // Cacheando cliente por ID
    @CacheResult(cacheName = "customer")
    public Uni<CustomerModel> getCustomerById(@CacheKey String id) {
        return Uni.createFrom().item(
            customerSetCommands.smembers("customers")
                .stream()
                .filter(customer -> customer.getId().equals(id))
                .findFirst()
                .orElse(null)
        );
    }

    // Adiciona um cliente ao Redis e ao cache
    public Uni<Void> addCustomer(CustomerModel customer) {
        // Gera um ID único para o novo cliente
        customer.setId(UUID.randomUUID().toString());

        // Adiciona ao Redis
        customerSetCommands.sadd("customers", customer);

        return Uni.createFrom().voidItem();
    }

    // Atualiza o cliente existente no Redis e no cache
    @CacheInvalidate(cacheName = "customer", key = "#id") // Invalida o cache do cliente específico
    public Uni<Void> updateCustomer(@CacheKey String id, CustomerModel updatedCustomer) {
        List<CustomerModel> customers = customerSetCommands.smembers("customers")
                .stream().collect(Collectors.toList());

        customers.stream().filter(customer -> customer.getId().equals(id)).findFirst().ifPresent(customer -> {
            customer.setFirstName(updatedCustomer.getFirstName());
            customer.setLastName(updatedCustomer.getLastName());
            customer.setAge(updatedCustomer.getAge());
            customer.setEmail(updatedCustomer.getEmail());
            // Remove o cliente antigo
            customerSetCommands.srem("customers", customer);
            // Adiciona o cliente atualizado
            customerSetCommands.sadd("customers", customer);
        });

        return Uni.createFrom().voidItem();
    }

    // Remove um cliente do Redis e do cache
    @CacheInvalidate(cacheName = "customer", key = "#id") // Invalida o cache do cliente específico
    public Uni<Void> deleteCustomer(@CacheKey String id) {
        List<CustomerModel> customers = customerSetCommands.smembers("customers")
                .stream().collect(Collectors.toList());

        customers.stream().filter(customer -> customer.getId().equals(id)).findFirst()
                .ifPresent(customer -> customerSetCommands.srem("customers", customer));

        return Uni.createFrom().voidItem();
    }
}
