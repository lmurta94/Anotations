Proto

syntax = "proto3";

option java_multiple_files = true;
option java_package = "customer";
option java_outer_classname = "CustomerProto";

service CustomerService {
    // Cliente envia um stream de CustomerDTO, e o servidor responde com um Empty.
    rpc AddCustomers (stream CustomerDTO) returns (google.protobuf.Empty);
}

message CustomerDTO {
    string name = 1;
    string lastname = 2;
    string email = 3;
    int32 age = 4;
}


Server

package org.acme;

import com.google.protobuf.Empty;
import customer.CustomerDTO;
import customer.CustomerServiceGrpc;
import io.grpc.stub.StreamObserver;
import io.quarkus.grpc.GrpcService;

@GrpcService
public class CustomerServiceGRPC extends CustomerServiceGrpc.CustomerServiceImplBase {

    @Override
    public StreamObserver<CustomerDTO> addCustomers(StreamObserver<Empty> responseObserver) {
        return new StreamObserver<CustomerDTO>() {

            @Override
            public void onNext(CustomerDTO customer) {
                // Aqui você processa cada CustomerDTO que chega no stream
                System.out.println("Recebendo cliente: " + customer.getName() + " " + customer.getLastname());
                // Você pode, por exemplo, salvar o cliente em um banco de dados aqui
            }

            @Override
            public void onError(Throwable t) {
                // Lida com erros no stream
                System.err.println("Erro ao processar stream: " + t.getMessage());
                responseObserver.onError(t);
            }

            @Override
            public void onCompleted() {
                // Finaliza o processamento quando o cliente termina de enviar o stream
                System.out.println("Stream de clientes completo.");
                responseObserver.onNext(Empty.getDefaultInstance()); // Retorna uma resposta ao cliente
                responseObserver.onCompleted();
            }
        };
    }
}




Client
ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 9000)
        .usePlaintext()
        .build();

CustomerServiceGrpc.CustomerServiceStub stub = CustomerServiceGrpc.newStub(channel);

StreamObserver<CustomerDTO> requestObserver = stub.addCustomers(new StreamObserver<Empty>() {
    @Override
    public void onNext(Empty empty) {
        System.out.println("Stream completado com sucesso!");
    }

    @Override
    public void onError(Throwable t) {
        System.err.println("Erro ao enviar stream: " + t.getMessage());
    }

    @Override
    public void onCompleted() {
        System.out.println("Envio do stream completo.");
    }
});

// Enviar múltiplos objetos CustomerDTO no stream
for (int i = 0; i < 10; i++) {
    CustomerDTO customer = CustomerDTO.newBuilder()
            .setName("Nome" + i)
            .setLastname("Sobrenome" + i)
            .setEmail("email" + i + "@exemplo.com")
            .setAge(30 + i)
            .build();
    requestObserver.onNext(customer);  // Envia cada cliente no stream
}

// Finaliza o envio de dados
requestObserver.onCompleted();
